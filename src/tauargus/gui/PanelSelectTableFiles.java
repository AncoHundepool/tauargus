/*
* Argus Open Source
* Software to apply Statistical Disclosure Control techniques
* 
* Copyright 2014 Statistics Netherlands
* 
* This program is free software; you can redistribute it and/or 
* modify it under the terms of the European Union Public Licence 
* (EUPL) version 1.1, as published by the European Commission.
* 
* You can find the text of the EUPL v1.1 on
* https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
* 
* This software is distributed on an "AS IS" basis without 
* warranties or conditions of any kind, either express or implied.
*/

package tauargus.gui;

import argus.utils.SystemUtils;
import java.io.File;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;
import tauargus.model.DataFilePair;
import tauargus.utils.TauArgusUtils;

/**
 *
 * @author ambahnl
 */
public class PanelSelectTableFiles extends javax.swing.JPanel {
    private boolean showInfo = true;

    /*
     * Creates new form PanelSelectTableFiles
     */
    public PanelSelectTableFiles(boolean isMetaDataOptional) {
        initComponents();
        if (isMetaDataOptional) {
            labelTableMetadata.setText("Table Metadata (optional):");
            textInfo.setRows(4);
        }
        else {
            labelTableMetadata.setText("Table Metadata:");
            textInfo.setRows(1);
        }
          textInfo.setVisible(false);
          showInfo = isMetaDataOptional;
    }

    public PanelSelectTableFiles() {
        this(true);
    }

    public DataFilePair getDataFilePair() {
        return new DataFilePair(textFieldTableData.getText(), textFieldTableMetadata.getText());
    }
    
    public String getTableDataFileName() {
        return textFieldTableData.getText();
    }
    
    public String getTableMetaFileName() {
        return textFieldTableMetadata.getText();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        labelTableData = new javax.swing.JLabel();
        textFieldTableData = new javax.swing.JTextField();
        buttonTableData = new javax.swing.JButton();
        labelTableMetadata = new javax.swing.JLabel();
        textFieldTableMetadata = new javax.swing.JTextField();
        buttonTableMetadata = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInfo = new javax.swing.JTextArea();

        fileChooser.setDialogTitle("");

        labelTableData.setLabelFor(textFieldTableData);
        labelTableData.setText("Table Data:");

        buttonTableData.setText("...");
        buttonTableData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTableDataActionPerformed(evt);
            }
        });

        labelTableMetadata.setLabelFor(textFieldTableMetadata);
        labelTableMetadata.setText("Table Metadata (optional): ");

        buttonTableMetadata.setText("...");
        buttonTableMetadata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTableMetadataActionPerformed(evt);
            }
        });

        textInfo.setEditable(false);
        textInfo.setColumns(20);
        textInfo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        textInfo.setForeground(new java.awt.Color(0, 0, 255));
        textInfo.setLineWrap(true);
        textInfo.setRows(4);
        textInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        textInfo.setOpaque(false);
        jScrollPane1.setViewportView(textInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelTableMetadata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelTableData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldTableData, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addComponent(textFieldTableMetadata))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonTableData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTableMetadata, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTableData)
                    .addComponent(textFieldTableData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTableData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTableMetadata)
                    .addComponent(textFieldTableMetadata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTableMetadata))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /* 
     * In many situations the metadata filename has the same name as the 
     * microdata filename, only with another extension.
     */
    private void setMetaDataFileNameIfPossible() {
        String fileName = textFieldTableData.getText();
        int extensionIndex = FilenameUtils.indexOfExtension(fileName);
        String baseFileName;
        if (extensionIndex == -1) {
            baseFileName = fileName;
        }
        else {
            baseFileName = fileName.substring(0, extensionIndex);
        }
        String metaDataFileName = baseFileName + ".rda";
        File file = new File(metaDataFileName);
        if (file.exists() && file.isFile()) {
            textFieldTableMetadata.setText(metaDataFileName);
        }
    }

    private void buttonTableDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTableDataActionPerformed
      String hs = SystemUtils.getRegString("general", "datadir", "");
        if (!hs.equals("")){
            File file = new File(hs); 
            fileChooser.setCurrentDirectory(file);
        }
        TauArgusUtils.getDataDirFromRegistry(fileChooser);
        fileChooser.setDialogTitle("Open Table Data");
        fileChooser.setSelectedFile(new File(""));
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Table Data (*.tab)", "tab"));
        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            textFieldTableData.setText(fileChooser.getSelectedFile().toString());
            hs = fileChooser.getSelectedFile().getPath();
            TauArgusUtils.putDataDirInRegistry(hs);
            setMetaDataFileNameIfPossible();
        }
        setInfo();
    }//GEN-LAST:event_buttonTableDataActionPerformed

    private void buttonTableMetadataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTableMetadataActionPerformed
        TauArgusUtils.getDataDirFromRegistry(fileChooser);
        fileChooser.setDialogTitle("Open Table Metadata");
        fileChooser.setSelectedFile(new File(""));
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Table Metadata (*.rda)", "rda"));
        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            textFieldTableMetadata.setText(fileChooser.getSelectedFile().toString());
            TauArgusUtils.putDataDirInRegistry(fileChooser.getSelectedFile().toString());
        }
    }//GEN-LAST:event_buttonTableMetadataActionPerformed

    private void setInfo(){
      if (!showInfo){return;}  
      if (!textFieldTableData.getText().equals("")){  
        textInfo.setVisible(true);     
        if (textFieldTableMetadata.getText().equals("")){
           textInfo.setText("As no metadata file has been specified\n" +
                            "specify the metadata file too or\n" +
                            "specify the metadata via Specify|Metadata");
        } else{
           textInfo.setText("For changing/inspecting the metadata go to Specify|Metadata\n"+
                            "For specifying the table(s) go to Specify|Tables");
        }  
      }
      else{
        textInfo.setVisible(false);
      }  
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTableData;
    private javax.swing.JButton buttonTableMetadata;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTableData;
    private javax.swing.JLabel labelTableMetadata;
    private javax.swing.JTextField textFieldTableData;
    private javax.swing.JTextField textFieldTableMetadata;
    private javax.swing.JTextArea textInfo;
    // End of variables declaration//GEN-END:variables
}
